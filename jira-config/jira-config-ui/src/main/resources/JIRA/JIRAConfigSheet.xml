<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.2" reference="JIRA.JIRAConfigSheet" locale="">
  <web>JIRA</web>
  <name>JIRAConfigSheet</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>JIRA.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>JIRA Config Sheet</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity}}
#set ($discard = $xwiki.jsx.use('JIRA.JIRAConfigSheet'))
#set ($redirect = $xwiki.relativeRequestURL)
#set ($configDoc = $xwiki.getDocument('JIRA.JIRAConfig'))
## If there's no xobject create one!
#set ($configClassName = 'JIRA.JIRAConfigClass')
#set ($configObject = $configDoc.getObject($configClassName))
#if ($xcontext.action == 'admin' &amp;&amp; "$!configObject" == '')
  #set ($configObject = $configDoc.newObject($configClassName))
  #set ($discard = $configDoc.save('Created empty JIRA configuration', true))
#end
#set($jiraAuthUixByConfigIds = {})
#set($jiraAuthUixs = $services.uix.getExtensions('org.xwiki.contrib.jira.authconfig'))
#foreach ($uix in $jiraAuthUixs)
  #set($configDisplayerReference = $uix.parameters.get('config_displayer_reference'))
  #set($jiraAuthUixByConfigIds[$uix.parameters.get('config_id')] = $xwiki.getURL($configDisplayerReference, 'get'))
  ## Also load the JSX and SSX, so the authenticator can inject JSX or/and SSX here if needed.
  #set($discard = $xwiki.jsx.use($configDisplayerReference))
  #set($discard = $xwiki.ssx.use($configDisplayerReference))
#end
{{html clean="false"}}
  &lt;form id="jiraConfig" method="post" action="$configDoc.getURL("save", "xredirect=$escapetool.url(${redirect})")" class="withLock xform" data-auth-displayer-urls="$escapetool.xml($jsontool.serialize($jiraAuthUixByConfigIds))"&gt;
    &lt;fieldset&gt;
      &lt;dl&gt;
        &lt;dt&gt;
          &lt;label for='jiraInstances'&gt;$services.localization.render('jira.config.label')&lt;/label&gt;
          &lt;span class='xHint'&gt;$services.localization.render('jira.config.label.hint')&lt;/span&gt;
        &lt;/dt&gt;
        &lt;dd&gt;
          &lt;br /&gt;
          &lt;div id='jiraInstances'&gt;
{{/html}}

|=$services.localization.render('jira.config.id')|=$services.localization.render('jira.config.url')|=$services.localization.render('jira.config.authType', 'xwiki/2.1')|=$services.localization.render('jira.config.authConfig', 'xwiki/2.1')|=$services.localization.render('jira.config.delete')
##
##
#foreach($serverObject in $configDoc.getObjects($configClassName))
  #set ($deleteURL = $configDoc.getURL('objectremove', "form_token=$!{services.csrf.getToken()}&amp;classname=${escapetool.url($configClassName)}&amp;classid=${serverObject.number}&amp;xredirect=${escapetool.url($redirect)}"))
  |(% class="jira-server-id" %)$serverObject.display('id', 'edit')|$serverObject.display('url', 'edit')|$serverObject.display('authenticationType', 'edit')|(% class="jira-auth-configuration" %)|=[[image:icon:cross&gt;&gt;path:$deleteURL]]
#end

{{html clean="false"}}
          &lt;/div&gt;        
        &lt;/dd&gt;
      &lt;/dl&gt;
    &lt;/fieldset&gt;
    &lt;input type="hidden" name="form_token" value="$!{services.csrf.getToken()}" /&gt;
    &lt;input type="submit" value="$services.localization.render('jira.config.save')" name="formactionsac" class="button" /&gt;
    &lt;span class="buttonwrapper"&gt;
      &lt;a href="$configDoc.getURL('objectadd', "classname=$escapetool.url($configClassName)&amp;amp;form_token=$!{services.csrf.getToken()}&amp;amp;xredirect=$escapetool.url(${redirect})")" class="xobject-add-control"&gt;$services.localization.render('jira.config.add')&lt;/a&gt;
    &lt;/span&gt;
  &lt;/form&gt;
{{/html}}
{{/velocity}}</content>
  <object>
    <name>JIRA.JIRAConfigSheet</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>59845abc-de0a-4d70-adb6-47f6413ba830</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <restricted>0</restricted>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>require(['jquery'], function ($) {
    const urlMapping = JSON.parse($('#jiraConfig')[0].dataset.authDisplayerUrls)
    /**
     * Load or reload the displayer for the authenticator configuration
     * @param {*} element the parent container for the displayer content
     */
    async function updateDisplayer(element) {
        const id = $(element).parent().find(".jira-server-id &gt; input").val()
        const authType = $(element).parent().find("select.jira-config-authentication-type").val()
        const url = urlMapping[authType]
        let body = ''
        if (url !== undefined) {
            try {
                const response = await fetch(`${url}?${new URLSearchParams({ id, authType })}`);
                if (!response.ok) {
                    console.error("can't get displayer content")
                    return
                }
                body = await response.text()
            } catch (e) {
                console.error(e);
                return
            }
        }
        element.innerHTML = body
    }

    // First load of the authenticator displayer
    for (const element of $('.jira-auth-configuration')) {
        // event if updateDisplayer(...) is async we don't really need to wait on the result of updateDisplayer(...)
        // because it already catch itself the errors and each authentication configuration is independent
        updateDisplayer(element)
    }

    // Reload the authenticator displayer if we change the authenticator
    for (const element of $('.jira-config-authentication-type')) {
        $(element).on('change', (event) =&gt; {
            const e = $(element).parent().parent().find('td.jira-auth-configuration')[0]
            // event if updateDisplayer(...) is async we don't really need to wait on the result of updateDisplayer(...)
            // because it already catch itself the errors and each authentication configuration is independent
            updateDisplayer(e)
        })
    }


    $('#jiraConfig input.button').on('click', async (e) =&gt; {
        // Avoid that on the reload of the page we cancel the next async part of code which save for the authentication configuration
        // The save of the main configuration will be done after we saved all authenticator configuration
        e.preventDefault()

        // Save the authenticator configuration
        // We need to ensure that all fetch request are done before running "form.submit()"
        // overise the reload of the page (triggered by form.submit()) will cancel the fetch requests.
        const form = $('#jiraConfig')[0]
        const urlEncodedData = new URLSearchParams(new FormData(form).entries());

        await Promise.all(Object.values(urlMapping).map(async url =&gt; {
            const fetchUrl = `${url}?save=true`
            try {
                const response = await fetch(fetchUrl, {
                    method: "POST",
                    headers: {
                            'Content-Type': 'application/x-www-form-urlencoded'
                        },
                    body: urlEncodedData,
                });
                if (!response.ok) {
                    console.error("Can't update JIRA authenticator configuration")
                }
            } catch (e) {
                console.error(e);
            }
        }))
        // run the default action as soon as the other query was sent
        form.submit();
    });

    // Update the ID fields of the authenticator configuration, so we have a consistent server ID matching between the JIRAServer configuration and the authenticator configuration
    for (const element of $('form#jiraConfig .jira-server-id input')) {
        element.on('change', (e) =&gt; {
            const idHiddenFiled = $(element).parent().parent().find('td.jira-auth-configuration input[type="hidden"]')[0]
            if (idHiddenFiled != null) {
                idHiddenFiled.value = element.value
            }
        })
    }
})</code>
    </property>
    <property>
      <name>authTypeSelector</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
</xwikidoc>